// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package storagemock

import (
	entidades "aveonline/internal/entidades"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MedicamentoRepository is an autogenerated mock type for the MedicamentoRepository type
type MedicamentoRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, id
func (_m *MedicamentoRepository) Find(ctx context.Context, id int) (entidades.Medicamento, error) {
	ret := _m.Called(ctx, id)

	var r0 entidades.Medicamento
	if rf, ok := ret.Get(0).(func(context.Context, int) entidades.Medicamento); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entidades.Medicamento)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *MedicamentoRepository) FindAll(ctx context.Context) []entidades.Medicamento {
	ret := _m.Called(ctx)

	var r0 []entidades.Medicamento
	if rf, ok := ret.Get(0).(func(context.Context) []entidades.Medicamento); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entidades.Medicamento)
		}
	}

	return r0
}

// FindByIds provides a mock function with given fields: ctx, ids
func (_m *MedicamentoRepository) FindByIds(ctx context.Context, ids []int) []entidades.Medicamento {
	ret := _m.Called(ctx, ids)

	var r0 []entidades.Medicamento
	if rf, ok := ret.Get(0).(func(context.Context, []int) []entidades.Medicamento); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entidades.Medicamento)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctx, medicamento
func (_m *MedicamentoRepository) Save(ctx context.Context, medicamento entidades.Medicamento) error {
	ret := _m.Called(ctx, medicamento)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entidades.Medicamento) error); ok {
		r0 = rf(ctx, medicamento)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
